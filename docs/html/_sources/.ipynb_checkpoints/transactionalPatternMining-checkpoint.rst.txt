Transactional Database
=========================

    A transactional database is a set of transactions.

    Each transaction contains a transaction-identifier (TID) and a set of items.

Example:


    A sample transactional database containing the items from a to f is shown in below.

    +-----+----------------+
    | TID | Transactions   |
    +=====+================+
    | 1   |  a, b, c       |
    +-----+----------------+
    | 2   |  d, e          |
    +-----+----------------+
    | 3   |  a, e, f       |
    +-----+----------------+

Rules to create a transactional database:

    - Since the TID of a transaction directly represents its row number in a database, we the algorithms in PAMI ignore the TID information to save storage space and processing time.

    - The items in a transactional database can be integers or strings.

    - All items in a transaction must be seperated with a separator.

    - ‘ Tab space ’ is the default seperator used by the mining algorithms in PAMI. However, transactional databases can also be constructed using other separators, such as comma and space.

Format:

        >>>  item1<sep>item2<sep>...<sep>itemN

Example:

     >>>    a   b   c
            a   d   e   f
            b   d





.. toctree::
   :maxdepth: 1

   frequent1

.. toctree::
   :maxdepth: 1

   relativeFrequent

.. toctree::
   :maxdepth: 1

   FrequentPatternWithMultipleMinimumSupport1

.. toctree::
   :maxdepth: 1

   CorrelatedPatternMining1

.. toctree::
   :maxdepth: 1

   FaultTolerantPatternMining1

.. toctree::
   :maxdepth: 1

   CoveragePatternMining1
